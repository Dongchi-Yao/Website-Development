version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: cyber-risk-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: cyber-risk-dashboard
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - cyber-risk-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cyber-risk-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/cyber-risk-dashboard?authSource=admin
      - JWT_SECRET=your-super-secure-jwt-secret-key-change-this-in-production
      - JWT_EXPIRES_IN=30d
      - PYTHON_SERVICE_URL=http://python-service:8000
    volumes:
      - backend_uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - cyber-risk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python FastAPI Service
  python-service:
    build:
      context: ./backend/python_service
      dockerfile: Dockerfile
    container_name: cyber-risk-python-service
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      - python_models:/app/models
    ports:
      - "8000:8000"
    networks:
      - cyber-risk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend with Nginx
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cyber-risk-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
      python-service:
        condition: service_healthy
    ports:
      - "3000:80"
    networks:
      - cyber-risk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local
  backend_uploads:
    driver: local
  python_models:
    driver: local

networks:
  cyber-risk-network:
    driver: bridge 