import pandas as pd
import torch
import torch.nn as nn

# Users should give the values
new_sample_values = [0, 4, 2, 4, 5, 3, 1, 1, 2, 4, 5, 5, 5, 5, 5, 5, 1, 3, 7, 7, 7, 7, 7, 7, 0, 4, 2, 0, 4, 4, 1, 2, 2, 1, 5, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1]

df = pd.read_pickle("df.pkl") # load the df data
df_copy = df.copy()
new_sample = pd.Series(new_sample_values, index=df_copy.columns).to_frame().T
df_copy = pd.concat([df_copy, new_sample], ignore_index=True)
df_str_copy = df_copy.astype(str)
df_one_hot_copy = pd.get_dummies(df_str_copy)
sample_df = df_one_hot_copy.iloc[-1:] # Get only the last added sample
test_sample_tensor = torch.tensor(sample_df.values.astype(int).squeeze(), dtype=torch.float)

risk='data'

risk_index_map = {
    'ransomware': 0,
    'phishing': 1,
    'insider': 2,
    'data': 3,
    'supply': 4
}

class Combined3(nn.Module):
    def __init__(self):
        super(Combined3, self).__init__()

        self.layers = nn.Sequential(
            nn.Linear(num_input_units, 200),
            nn.LeakyReLU(),
            nn.Linear(200, 100),
            nn.LeakyReLU(),
            nn.Linear(100, 50),
            nn.LeakyReLU(),
            nn.Linear(50, 5),
            nn.Sigmoid()
        )

        self.initialize_weights()

    def forward(self, x):
        return self.layers(x)

    def initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Linear):
                nn.init.xavier_uniform_(m.weight)
                nn.init.zeros_(m.bias)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model_path = "/content/data_model_entire.pth"
model = torch.load(model_path, map_location=device)
model.eval()  # set the model to evaluation mode


prediction_index = risk_index_map[risk]
with torch.no_grad():
    prediction = model(test_sample_tensor.to(device))[prediction_index].item()

print(round(prediction, 2))
